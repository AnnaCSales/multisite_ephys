% A plotting script that starts with a completed spikestruct, plots 
% cluster properties. NB this script is tailored for the two recordings
% explored in detail in the paper (Rat 3 and 4, 081220 and 091220)
% Anna Sales April 2021

% NB for Rat 3 - isolated C fibres are
% Clusters 3,2,1,4 = Fibres 1,2,3,4 in paper (order got messed up when
% re-clustering)

% For Rat 4 - isolated C fibres are clusters 3 and 4

%% Load in the spikeStruct and run this section first
%  Run this code from the folder containing the spikeStruct, the clustering
%  output, the raw binary and the ADC files for the pedal and ECG.

datapath=pwd; %dont forget backslash
 
%for Rat 3 (comment out as needed)
% Path to ADC file with pedal on
ADC_fn=[pwd '\100_ADC2_3.continuous'];   %for 8th Dec
% Path to continuous file with ECG recording.
ECG_fn=[pwd '\100_CH34_3.continuous'];

% for Rat 4
% ADC_fn=[pwd '\113_ADC2.continuous'];   %for 9th Dec
% % Path to continuous file with ECG recording.
%  ECG_fn=[pwd '\113_CH34.continuous'];


%% Times for digitimer TTL
TTLchan1=2;  %this is the channel to take TTLs from
fsts=spikeStruct.TTLs.digital{TTLchan1};
fsts(2:2:end)=[];

inds2=find( diff(fsts)>0.4 & diff(fsts) <.6)+1;
inds2=[inds2(1)-1; inds2];
fsts_2Hz=fsts(inds2);

inds025=find( diff(fsts)>3.9 & diff(fsts) <4.1)+1;
inds025=[inds025(1)-1; inds025];
fsts_025Hz=fsts(inds025);

%optional plot - for checking which TTLs are in the Obreja protocol 
figure;plot(fsts, 1.2*ones(numel(fsts)), 'rX');

% enter times when Obreja protocol was running - can use plot above to
% check (should be two long continous periods of TTLs separated by 3m gap)
% Obreja times (exclude stims for thresholding)
obj_times=[800,1875];
fsts_Ob=fsts(fsts>obj_times(1)& fsts<obj_times(2));

% Low frequency stims, preceeding 2Hz (for baseline CV calculation)

inds_slow=find( diff(fsts)>7.9 )+1;
inds_slow=[inds_slow(1)-1; inds_slow];
fsts_slow=fsts(inds_slow);

% find 2Hz period, exclude anything that happened after that.
first_2Hz=fsts_2Hz(1); 
fsts_slow(fsts_slow>=first_2Hz)=[];
fsts_slow(fsts_slow<850)=[];

nlabels=length(spikeStruct.TTLs.manual.TTL_labels);
%% Retrieve times of pedal down / up, for marking vonFreys, paintbrush etc.
pedal_ts=pedalOnOffs(ADC_fn);
%% Pull out useful things for plotting from the spikeStruct:

nclusts=spikeStruct.nclusts;  %number of clusters
fs=spikeStruct.sample_rate;   % sampling rate
newWFs=spikeStruct.allchanWFs;  %waveforms across channels, for each cluster
c_channel=spikeStruct.c_channel;  %centre channel for the cluster
av_waveform=spikeStruct.av_waveform;  %av waveform on the centre channel
plot_pos=spikeStruct.plot_pos;     % depth of each cluster
bl_start=spikeStruct.baseline_st;  %baseline info
bl_end=spikeStruct.baseline_end;
min_t=spikeStruct.timeRange(1);    %time range of recording
max_t=spikeStruct.timeRange(2);
sq_=ceil(nclusts^0.5) ; %for calculating the number of subplots required

%set up some labels for plots below.
for pos=1:1:length(plot_pos)
    unit_test(pos)=find(plot_pos==pos); %The unit that is in the pos-th position on the plot
    chan_=spikeStruct.c_channel(unit_test(pos));   
    tt=['Clu ', int2str(unit_test(pos)), '  c chan= ', int2str(spikeStruct.c_channel(unit_test(pos)))];
    ticklabs{pos}=tt;
end

ticker=11:10:(10*(nclusts+1));


%% Each section now plots something different - run as required.
probe_fig = plotProbe(spikeStruct)

%% Plot waveform on centre channel and autocorrelograms, individually for each cluster

%specify parameters
pms.cell_list=[1:nclusts];
pms.binsize=2;  %binsize, in ms
pms.window=300;  %window size, in ms.
pms.baseline = 1 ;
[wavefig, autofig] = plot_waveforms_acors(spikeStruct, pms)

%% Plot waveform across multiple chans
for u=[1:nclusts]
    multichan_wfs=plot_across_chans(spikeStruct, u, 80, [-240, 100]) % u=unit, 80=dist from cent chan, []=ylimits. 
%     savefig( multichan_wfs, [pwd '\unit' num2str(u) 'wf_across_chans.fig'] );  
end

%% Plot xcors, to check isolation - NB don't plot too many as it will be slow
%  Produces plot which is more like PHY - used in paper.

pms2.cell_list=[3,2,1,4];  %the units to plot the cross correlograms for

pms2.binsize=3;  %binsize, in ms
pms2.window=400;  %window size, in ms.
pms2.baseline = [] ; %leave empty if no baseline!

[corfig] = cell_xcors(spikeStruct, pms2)
% ylim([0, 0.04])
% aa=gca;
% aa.FontSize=14;
% ff=gcf;
% ff.Position=[11.8322 13.1022 8.2973 6.6887]

%% Plot waveforms after electrical stimulation, for all units.
event_times=fsts;
duration=150; %window after event in which we should consider a spike generated by the event, in ms
wf_fig=wf_during_event(spikeStruct,fsts_025Hz, duration, 'dataALL.bin' );

%% Plotting activity around selected TTLs
  
win=[0.1, 0.2] ; %specify a window, time before and after event to consider for pinches
binwin=0.002;

TTL_to_plot=fsts_Ob;  %update this as needed. These are the TTLs to plot.
nTTL=length(TTL_to_plot);
y=1;

for iUnit=[3,2,1,4]; % specify units to plot.

 figure('color','w', 'units', 'centimeters', 'pos',[5 2 9.5 10.8]);

  %pull out the relevant spike times
  ts_= spikeStruct.timesSorted{iUnit};

  event_ts=[];
  spk_count_all=[];
  for iTTL=1:nTTL 

      event_ts=TTL_to_plot(iTTL);

      win_st=event_ts-win(1);
      win_end=event_ts+win(2);

      t_ind1=find(ts_>=win_st & ts_<=win_end);
      ts_window=ts_(t_ind1);  %store all the data that's been cut.

       tbin_edges = win_st:binwin:win_end;

      if iTTL==1 %store a time vector for plotting
          tbin_centers = tbin_edges(1:end-1)+binwin/2;
          t_plot=tbin_centers-event_ts;
      end

       d=subplot(2,1,1);
  
      reps=5;
      if reps==length(ts_window);
          reps=6;  %had to put this in because the plot will mess up if ts_plot is a square!
      end

      ts_plot=repmat(ts_window-event_ts, 1, reps);  %NB if this is a square matrix the plot will mess up as it'll go along wrong dim
      y_marks_=iTTL+linspace(-0.3,0.3, reps)  ; %centres at  nTTL, nTTL-1.. etc for each trial  #

      if ts_window
          pp=plot(ts_plot*1000, y_marks_', 'k', 'LineWidth', 1.8);
      end
      hold on
    
  end

  xlabel('Time (ms)')
  ylabel('Trial #')
  set(gca, 'FontSize', 15);
  set(gca, 'YDir', 'reverse');
  title(['Fibre #' num2str(y)], 'FontWeight', 'normal')    

  xlim([25, 160]);
  ylim([0, nTTL+1]);
  d.Position=[0.19, 0.15, 0.6, 0.77]; 
  y=y+1;
  box off
end